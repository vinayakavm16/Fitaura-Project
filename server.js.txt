server.js
1import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import mongoose from "mongoose";
import mysql from "mysql";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import axios from "axios"; // ✅ For making requests to Flask

import authRoutes from "./routes/auth.js";

// Load environment variables
dotenv.config();

// Debugging: Check if MONGO_URI is loaded correctly
console.log("MongoDB URI:", process.env.MONGO_URI);

const app = express();
app.use(cors());
app.use(express.json()); // Middleware to parse JSON

const PORT = process.env.PORT || 5000;

// ✅ MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log("✅ MongoDB Connected Successfully!"))
  .catch(err => console.log("❌ MongoDB Connection Error:", err));

// MySQL Connection (Uncomment if using MySQL)
// const db = mysql.createConnection({
//   host: process.env.MYSQL_HOST,
//   user: process.env.MYSQL_USER,
//   password: process.env.MYSQL_PASSWORD,
//   database: process.env.MYSQL_DB,
// });
// db.connect(err => {
//   if (err) throw err;
//   console.log("MySQL Connected");
// });

// ✅ Integrate authentication routes
app.use("/auth", authRoutes);

// ✅ Prediction Route - Connects to Python ML backend
app.post("/predict", async (req, res) => {
  try {
    const response = await axios.post("http://localhost:5001/predict", req.body); // Flask should run on port 5001
    res.json(response.data);
  } catch (error) {
    console.error("❌ Prediction Error:", error.message);
    res.status(500).json({ error: "Prediction failed. Try again later." });
  }
});
import predictRoutes from "./routes/predict.js";
app.use("/predict", predictRoutes);

// ✅ Start the server
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
